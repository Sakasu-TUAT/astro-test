---
import Layout from '../layouts/Layout.astro';
import '../styles/algo.scss';
import SimpleIcons from '../components/sns_icons_simple.astro';

---
<Layout title="algo">
        <div class="article">
            <div class="hero">
                <h1>アルゴリズムとデータ構造(工事中)</h1>
                <p>問題置き場にする(?)</p>
            </div>


            <section class="algorithm-list">
                    <!-- <summary>  -->
                    <h2>動的計画法 (Dynamic Programming, DP)</h2> 
                    <!-- </summary> -->
                    <h3>動的計画法とは</h3>
                    <h3>部分和問題</h3>
                    <h3>ナップザック問題</h3>
                    <h3>最長共通部分列問題 (Longest Common Subsequence, LCS)</h3>
                    <h3>区間DP</h3>
                                    
                    <h3>最長増加部分文字列 (Longest Increasing Subsequence, LIS)</h3>
                    <class class="source_code">
                        <!-- <p>ソースコード</p> -->
                        <!-- <script src="https://gist.github.com/Sakasu-TUAT/714e8c0fb41c944f7f9ec520f397704f.js"></script>                     -->
                        <pre><code>
                                &lt;script&gt;
                                    console.log("コードを表示させてみました");
                                &lt;/script&gt;
                        </code></pre>                
                    </class>

                    <class class="source_code">
                        <pre><code>
                                #include &lt;iostream&gt;
                                #include &lt;iostream&gt;
                                #include &lt;vector&gt;
                                using namespace std;
                                using Graph = vector&lt;vector&lt;int&gt;&gt;;

                                // 深さ優先探索
                                vector&lt;bool&gt; seen;
                                void dfs(const Graph &amp;G, int v) &#123;
                                    seen[v] = true; // v を訪問済にする

                                    // v から行ける各頂点 next_v について
                                    for (auto next_v : G[v]) &#123;
                                        if (seen[next_v]) continue; // next_v が探索済だったらスルー
                                        dfs(G, next_v); // 再帰的に探索
                                    &#125;
                                &#125;

                                int main() &#123;
                                    // 頂点数と辺数
                                    int N, M; cin &gt;&gt; N &gt;&gt; M;

                                    // グラフ入力受取 (ここでは無向グラフを想定)
                                    Graph G(N);
                                    for (int i = 0; i &lt; M; ++i) &#123;
                                        int a, b;
                                        cin &gt;&gt; a &gt;&gt; b;
                                        G[a].push_back(b);
                                        G[b].push_back(a);
                                    &#125;

                                    // 頂点 0 をスタートとした探索
                                    seen.assign(N, false); // 全頂点を「未訪問」に初期化
                                    dfs(G, 0);
                                &#125;
                        </code></pre>    
                    </class>

                               
                    </code></pre>

                    <h2 class="article-heading">midashi</h2>
                    <ol>
                        <li><a href="algorithm1.html">アルゴリズム1の説明</a></li>
                        <li><a href="algorithm2.html">アルゴリズム2の説明</a></li>
                        <li><a href="algorithm3.html">アルゴリズム3の説明</a></li>
                    </ol>
            </section>
     
        </div>
        <SimpleIcons />
</Layout>

<style> 
    .source_code {
        background-color: #22242a;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
        display:flex;
        color: rgb(255, 255, 255);
        border: 5px solid rgb(225, 203, 79); 
        border-radius: 15px; 
        opacity: 0.9; 
        /* text-align: left;  */
    }

    .source_code code {
        display: block;
        white-space: pre-wrap;
        position: relative;
        margin-left: -20%;
        height: 100%;
    }

    .article {
        margin: 0 auto;
        max-width: 800px;
        padding: 0 1rem;
    }


</style> 